#!/usr/bin/env python

import sys, os
import Image, ImageDraw

class ImageGestion:
	def __init__(self, dim, scale, name):
		self.dim = dim
		self.img = Image.new("RGB", self.dim)
		self.name = name
		self.scale = scale

	def __del__(self):
		self.img.save(self.name + ".png")
		os.system("display -title \"Powered by patard_a and hervet_g for 103 interpol\" " + self.name + ".png")
		print "Image saved as \"" + self.name + ".png\"  \033[01;32mSucces !\033[00m"

	def draw_axes(self):
	    draw = ImageDraw.Draw(self.img)
	    draw.line((self.scale, self.scale, self.scale, self.dim[1] - self.scale))
	    draw.line((self.scale, self.dim[1] - self.scale, self.dim[0] - self.scale, self.dim[1] - self.scale))
	    del draw
	    return self

	def draw_graduate(self):
	    draw = ImageDraw.Draw(self.img)
	    decal = self.scale / 10
	    coo = (self.scale, self.dim[1] - self.scale)
	    # point (0, 0)
	    draw.line((coo[0] - decal, coo[1] + decal, coo[0] + decal, coo[1] - decal), fill=0x6AD500)
	    draw.text((self.scale * 0.6, self.dim[1] - self.scale + 2 * decal), "0", fill=0x00ffff)
	    # Absice
	    grade = 1
	    while (grade < ((self.dim[0] - 2 * self.scale) / self.scale)):
		    coo = (self.scale * grade + self.scale, self.dim[1] - self.scale)
		    draw.line((coo[0], coo[1] + decal, coo[0], coo[1] - decal), fill=0x6AD500)
		    draw.text((coo[0] - 2, coo[1] + 2 * decal), str(grade), fill=0x00ffff)
		    grade += 1
	    # Ordonee
	    grade = 1
	    while (grade < ((self.dim[1] - 2 * self.scale) / self.scale)):
		    coo = (self.scale, self.dim[1] - self.scale * grade - self.scale)
		    draw.line((coo[0] + decal, coo[1], coo[0] - decal, coo[1]), fill=0x6AD500)
		    draw.text((coo[0] - 4 * decal, coo[1] - 5), str(grade), fill=0x00ffff)
		    grade += 1
	    del draw
	    return self

	def draw_point(self, point):
		coo = (self.scale * (1 + point[0]), self.dim[1] - self.scale * (1 + point[1]))
		draw = ImageDraw.Draw(self.img)
		draw.point((coo[0], coo[1]))
		draw.point(coo)
		del draw
		return self

	def aff_point(self, point):
		coo = (self.scale * (1 + point[0]), self.dim[1] - self.scale * (1 + point[1]))
		draw = ImageDraw.Draw(self.img)
		for idx in range(self.scale / 10):
			draw.point((coo[0], coo[1]))
			draw.point((coo[0] + idx, coo[1]))
			draw.point((coo[0], coo[1] + idx))
			draw.point((coo[0] - idx, coo[1]))
			draw.point((coo[0], coo[1] - idx))
		draw.point(coo)
		del draw
		return self
	def aff_points(self, points):
		for idx in range(len(points)):
			self.aff_point(points[idx])
		return self

	def get_spacing(self):
		return self.dim[0] - 2 * self.scale

	def get_scale(self):
		return self.scale
	def get_width(self):
		return self.dim[0]

def main():
	points = ((0.0000, 2.0000), (1.0000, 6.0000), (2.0000, 8.0000), (3.0000, 3.0000), (5.0000, 7.0000), (6.0000, 5.0000))
	img = ImageGestion((400, 600), 40, "103")
	img.draw_axes().draw_graduate().aff_points(points)
	spacing = img.get_spacing()
	scale = img.get_scale()
	width = img.get_width()
	nb_points = 0. + spacing / scale
	points_add = 1. / ((width - 2 * scale) / (spacing / scale))
	len_points = len(points)
	x = 0.
	while x < nb_points:
		p = 0.
		for i in range(len(points)):
			s = points[i][1] + 0.
			for j in range(len(points)):
				if (i != j):
					s *= (x - points[j][0]) / (points[i][0] - points[j][0])
			p += s
		img.draw_point((x, p))
		x += 1. / 1000

if __name__ == "__main__":
	main()
