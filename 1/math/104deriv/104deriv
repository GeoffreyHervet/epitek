#!/usr/bin/env python

import sys, os
import Image, ImageDraw
import math
import string

class ImageGestion:
	def __init__(self, dim, scale, name, scale_x=1, scale_y=1):
		self.dim = dim
		self.img = Image.new("RGB", self.dim)
		self.name = name
		self.scale = scale
		self.scale_x = scale_x
		self.scale_y = scale_y

	def __del__(self):
		self.img.save(self.name + ".png")
		print "Image saved as \"" + self.name + ".png\"  \033[01;32mSucces !\033[00m"
		os.system("display -title \"Powered by patard_a and hervet_g for 104 \" " + self.name + ".png")

	def draw_axes(self):
	    draw = ImageDraw.Draw(self.img)
	    draw.line((self.scale, 2 * self.scale, self.scale, self.dim[1] - self.scale))
	    draw.line((self.scale, self.dim[1] - self.scale, self.dim[0] - 2 * self.scale, self.dim[1] - self.scale))
	    del draw
	    return self

	def draw_graduate(self):
	    draw = ImageDraw.Draw(self.img)
	    decal = self.scale / 10
	    coo = (self.scale, self.dim[1] - self.scale)
	    draw.line((coo[0] - decal, coo[1] + decal, coo[0] + decal, coo[1] - decal), fill=0x6AD500)
	    draw.text((self.scale * 0.6, self.dim[1] - self.scale + 2 * decal), "0", fill=0x00ffff)
	    aff_x = self.scale_x
	    grade = 1
	    while (grade < ((self.dim[0] - 2 * self.scale) / self.scale)):
		    coo = (self.scale * grade + self.scale, self.dim[1] - self.scale)
		    draw.line((coo[0], coo[1], coo[0], 2 * self.scale))
		    draw.line((coo[0], coo[1] + decal, coo[0], coo[1] - decal), fill=0x6AD500)
		    draw.text((coo[0] - 2, coo[1] + 2 * decal), str(aff_x), fill=0x00ffff)
		    grade += 1
		    aff_x += self.scale_x
	    grade = 1
	    aff_y = self.scale_y
	    while (grade < ((self.dim[1] - 2 * self.scale) / self.scale)):
		    coo = (self.scale, self.dim[1] - self.scale * grade - self.scale)
		    draw.line((coo[0], coo[1], self.dim[0] - 2 * self.scale, coo[1]))
		    draw.line((coo[0] + decal, coo[1], coo[0] - decal, coo[1]), fill=0x6AD500)
		    draw.text((coo[0] - 4 * decal, coo[1] - 5), str(grade), fill=0x00ffff)
		    aff_y += self.scale_y
		    grade += 1
	    del draw
	    return self

	def draw_line(self, p1, p2, color):
		coo1 = (self.scale * (1 + p1[0] / self.scale_x ), self.dim[1] - self.scale * (1 + p1[1] / self.scale_y))
		coo2 = (self.scale * (1 + p2[0] / self.scale_x ), self.dim[1] - self.scale * (1 + p2[1] / self.scale_y))
		draw = ImageDraw.Draw(self.img)
		draw.line((coo1, coo2), fill=color)
		del draw
		return self

	def draw_point(self, point):
		coo = (self.scale * (1 + point[0] / self.scale_x ), self.dim[1] - self.scale * (1 + point[1] / self.scale_y))
		draw = ImageDraw.Draw(self.img)
		draw.point((coo[0], coo[1]))
		draw.point(coo)
		del draw
		return self

	def aff_point(self, point):
		coo = (self.scale * (1 + point[0] / self.scale_x ), self.dim[1] - self.scale * (1 + point[1] / self.scale_y))
		draw = ImageDraw.Draw(self.img)
		for idx in range(self.scale / 10):
			draw.point((coo[0], coo[1]))
			draw.point((coo[0] + idx, coo[1]))
			draw.point((coo[0], coo[1] + idx))
			draw.point((coo[0] - idx, coo[1]))
			draw.point((coo[0], coo[1] - idx))
		draw.point(coo)
		del draw
		return self

	def aff_func(self, f, step, color):
		draw = ImageDraw.Draw(self.img)
		start = step
		stop = 0
		while stop != 1:
			p1 = (self.scale * (1 + start / self.scale_x ), self.dim[1] - self.scale * (1 + f(start) / self.scale_y))
			p2 = (self.scale * (1 + (start + step) / self.scale_x), self.dim[1] - self.scale * (1 + f(start + step) / self.scale_y))

			if start + step > ((self.dim[0] - 3 * self.scale) / self.scale) * self.scale_x or f(start + step) > (self.dim[1] - 3 * self.scale) / self.scale:
				stop = 1
			else:
				draw.line((p1, p2), fill=color)
			start += step
		del draw
		return self

	def aff_points(self, points):
		for idx in range(len(points)):
			self.aff_point(points[idx])
		return self

eq = [  [lambda t: 3. / (4. - 3. * t),
	 lambda t,x: x ** 2,
	 3. / 4],
	[lambda t: math.exp(t * (5. / 4.)),
	 lambda t,x: x * (5. / 4),
	 1.],
	[lambda t: math.exp(math.sin(t) * 3. / 2.),
	 lambda t,x: x * math.cos(t) * 3. / 2.,
	 1.],
	[lambda t: math.cos(t ** 2.) * math.exp(2. * math.sin(t)),
	 lambda t,x: (math.cos(t) - t * math.tan(t ** 2)) * 2. * x,
	 1.]]

def main():
	if (len(sys.argv) < 3):
		print "Usage : " + sys.argv[0] + " [#courbe, pas, ...]"
		return 1

	dep = 0
	img = ImageGestion((800, 800), 100, "104", .2, 1)
	img.draw_axes().draw_graduate()
	while len(sys.argv) - dep > 1:
		N = (string.atoi(sys.argv[1 + dep]) - 1) % len(eq)
		img.aff_func(eq[N][0], .001, 0xff);
		h = float(1.0) / string.atof(sys.argv[2 + dep])
		i = 0. + h
		while i < 1.0001:
			ny = eq[N][2] + h * eq[N][1](i, eq[N][2])
			img.draw_line((i - h, eq[N][2]), (i, ny), 0xff00)
			eq[N][2] = ny
			i += h
		dep += 2

if __name__ == "__main__":
	main()
